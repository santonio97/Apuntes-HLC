<!---
Ejemplos de inserciÃ³n de videos

<video class="stretch" controls><source src="http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4" type="video/mp4"></video>
<iframe width="560" height="315" src="https://www.youtube.com/embed/3RBq-WlL4cU" frameborder="0" allowfullscreen></iframe>

slide: data-background="#ff0000" 
element: class="fragment" data-fragment-index="1"
-->

## HLC - Fullstack
---
![HLC-Fullstack](http://jamj2000.github.io/hlc-fullstack/hlc-fullstack.png)
<small> 2018-19 - IES Luis VÃ©lez de Guevara - Ã‰cija - Spain </small>


## Conceptos generales

[![cc-by-sa](http://jamj2000.github.io/hlc-fullstack/cc-by-sa.png)](http://creativecommons.org/licenses/by-sa/4.0/)


## Ãndice
--- 
- ### IntroducciÃ³n
- ### TecnologÃ­as para el backend
- ### TecnologÃ­as para el frontend
- ### MVC: Modelo-Vista-Controlador
- ### SPA: Single Page Application 
- ### Persistencia de los datos

<!--- Note: Nota a pie de pÃ¡gina. -->



## IntroducciÃ³n


### En esta Unidad aprenderemos a

- Identificar las tecnologÃ­as base de la web.
- Identfificar los lenguajes y frameworks usados en el lado del servidor.
- Identfificar los lenguajes y frameworks usados en el lado del cliente.
- Reconocer el patrÃ³n MVC.
- Distinguir entre MPA y SPA.
- Valorar la importancia de la persistencia de los datos.


### La base de la web

![HTML CSS Javascript](assets/html-css-js.png)

- **HTML**: Estructura del documento. `HTML5`. 
- **CSS**: Formato/apariencia del documento. `CSS3`.
- **Javascript**: Funcionalidad del documento. `ECMAScript6`.

Note: Al final de lÃ­nea se muestra la versiÃ³n mÃ¡s relevante actualmente.


### Partes de una aplicaciÃ³n web

![Backend-Frontend](assets/frontend-backend.png)


### Partes de una aplicaciÃ³n web

- **Backend**: parte que se ejecuta en el servidor.
  - Se encarga de atender las peticiones de los clientes.
  - Suele tener soporte de almacenamiento de datos.
  - TambiÃ©n se denomina capa de acceso a datos
- **Frontend**: parte que se ejecuta en el cliente.
  - Se encarga de la experiencia del usuario (UX).
  - Puede tener soporte de cache de datos.
  - TambiÃ©n se denomina capa de presentaciÃ³n.



## TecnologÃ­as para el backend


### Lenguajes del lado del servidor

![Backend Languages](assets/backend-languages.png)


### Lenguajes del lado del servidor

- **PHP**: PHP Hypertext Preprocessor. Uno de los lenguajes mÃ¡s utilizados para la creaciÃ³n de todo tipo de CMS.
- **JSP**: JavaServer Pages. Es la propuesta de Java, y uno de los mÃ¡s demandados.
- **ASP**: Active Server Pages. Es el lenguaje de desarrollo web de Microsoft. 
- **Ruby**: es un lenguaje de programaciÃ³n interpretado, reflexivo y orientado a objetos.
- **Python**: es un lenguaje de programaciÃ³n multiparadigma que hace hincapiÃ© en el cÃ³digo legible. 
- **Javascript (Node.js)**: cada vez mÃ¡s popular puesto que se usa tambiÃ©n en el lado cliente.


### Frameworks del lado servidor 

![Backend Frameworks](assets/backend-frameworks.png)


### Frameworks del lado servidor 

- PHP: **Laravel**, **Symfony**.
- JSP: **Spring**, **Struts**.
- ASP: **ASP.NET**, **ASP.NET Core**.
- Ruby: **Ruby on rails**.
- Python: **Django**.
- Node.js: **Express**. 

https://es.wikipedia.org/wiki/Modelo%E2%80%93vista%E2%80%93controlador 


### Resumen

![Desarrollo Backend](assets/back-end-development.png)



## TecnologÃ­as para el frontend


### Lenguajes del lado del cliente

- **Javascript**: 

![Desarrollo Backend](assets/javascript.png)


### Frameworks del lado cliente 

- **React**
- **Angular**
- **Vue**

![Desarrollo Backend](assets/react-angular-vue.png)


### Resumen

![Desarrollo Frontend](assets/front-end-development.png)



## Modelo-Vista-Controlador

![Modelo Vista Controlador](assets/MVC.png)


## Modelo-Vista-Controlador

- se ejecuta casi toda la lÃ³gica de aplicaciÃ³n en el backend. 
- el servidor sirve mÃºltiples vistas, cada vista es una pÃ¡gina HTML. 
- es una aplicaciÃ³n de mÃºltiples pÃ¡ginas (MPA). 


## Single Page Application

![AplicaciÃ³n de PÃ¡gina Ãšnica](assets/SPA.png)


## Single Page Application

- se ejecuta gran parte de la lÃ³gica de la aplicaciÃ³n en el frontend. 
- el servidor sirve datos mediante una API web. 
- principalmente se usan 2 formatos para el intercambio de datos:
  - **XML**
  - **JSON** 


## MVC vs SPA

![MVC vs SPA](assets/mvc-spa.png)



## Persistencia de los datos

- Uso de archivos
- Bases de datos relacionales
  - Subtipo importante: **BBDD objeto-relacionales**.
- Bases de datos no relacionales
  - Subtipo importante: **BBDD noSQL**.


### Bases de datos relacionales

![BBDD relacionales](assets/SQL.png)


### Bases de datos relacionales

- SQL Server 
- Oracle
- MySQL
- MariaDB
- PostgreSQL
- SQLite


### Bases de datos no relacionales (noSQL)

![BBDD relacionales](assets/noSQL.png)


### Bases de datos no relacionales (noSQL)

- Cassandra
- MongoDB
- Redis
- CouchDB
